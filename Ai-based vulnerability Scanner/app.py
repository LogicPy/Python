from flask import Flask, request, jsonify
import keras
from data_processing import preprocess_input_data  # Assuming this is in data_processing.py
import numpy as np

app = Flask(__name__)

@app.route('/scan', methods=['POST'])
def scan():
    data = request.get_json()  # data is a dictionary
    text_data = data['text']  # Extract the text field from the dictionary
    processed_data = preprocess_input_data(text_data)  # Ensure text_data is a string

    print("Shape before squeezing:", processed_data.shape)

    # Apply squeeze only if the second dimension is of size 1
    if processed_data.shape[1] == 1:
        processed_data = np.squeeze(processed_data, axis=1)

    print("Shape after squeezing:", processed_data.shape)

    model = keras.models.load_model('model_name.h5')

    result = model.predict(processed_data)

  # This removes the middle dimension

    # Now processed_data should be a NumPy array
    print("Processed data shape:", processed_data.shape)

    #result = model.predict(processed_data)

    print("Processed data shape before reshaping:", processed_data.shape)
    processed_data = np.expand_dims(processed_data, axis=0)  # Reshape if it's a single sample
    print("Processed data shape after reshaping:", processed_data.shape)

    result = model.predict(processed_data)
    result_list = result.tolist()  # Convert the NumPy array to a Python list
    return jsonify(result_list)

def decode_output(output):
   # Assuming output is a list of probability scores
   decoded_output = []
   for score in output:
       if score > 0.5:  # Assuming a threshold of 0.5
           decoded_output.append("Vulnerable")
       else:
           decoded_output.append("Not Vulnerable")
   return decoded_output


@app.route('/predict', methods=['POST'])
def predict():
    # Extract and preprocess input data
    data = request.get_json()  # data is a dictionary
    text_data = data['text']  # Extract the text field from the dictionary
    processed_data = preprocess_input_data(text_data)  # Ensure text_data is a string

    model = keras.models.load_model('model_name.h5')

    # Get model prediction
    prediction = model.predict(processed_data)

    # Decode the output
    decoded_prediction = decode_output(prediction[0])  # Assuming prediction is a list of lists
    
    # Return the decoded output
    return jsonify(decoded_prediction)



if __name__ == '__main__':
    app.run(debug=True)
